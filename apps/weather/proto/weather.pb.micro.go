// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/weather.proto

package weather

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Weather service

func NewWeatherEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Weather service

type WeatherService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Weather_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Weather_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Weather_BidiStreamService, error)
}

type weatherService struct {
	c    client.Client
	name string
}

func NewWeatherService(name string, c client.Client) WeatherService {
	return &weatherService{
		c:    c,
		name: name,
	}
}

func (c *weatherService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Weather.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) ClientStream(ctx context.Context, opts ...client.CallOption) (Weather_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Weather.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &weatherServiceClientStream{stream}, nil
}

type Weather_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type weatherServiceClientStream struct {
	stream client.Stream
}

func (x *weatherServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *weatherServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *weatherServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *weatherServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *weatherServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *weatherServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *weatherService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Weather_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Weather.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &weatherServiceServerStream{stream}, nil
}

type Weather_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type weatherServiceServerStream struct {
	stream client.Stream
}

func (x *weatherServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *weatherServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *weatherServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *weatherServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *weatherServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *weatherServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherService) BidiStream(ctx context.Context, opts ...client.CallOption) (Weather_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Weather.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &weatherServiceBidiStream{stream}, nil
}

type Weather_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type weatherServiceBidiStream struct {
	stream client.Stream
}

func (x *weatherServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *weatherServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *weatherServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *weatherServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *weatherServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *weatherServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *weatherServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Weather service

type WeatherHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Weather_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Weather_ServerStreamStream) error
	BidiStream(context.Context, Weather_BidiStreamStream) error
}

func RegisterWeatherHandler(s server.Server, hdlr WeatherHandler, opts ...server.HandlerOption) error {
	type weather interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Weather struct {
		weather
	}
	h := &weatherHandler{hdlr}
	return s.Handle(s.NewHandler(&Weather{h}, opts...))
}

type weatherHandler struct {
	WeatherHandler
}

func (h *weatherHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.WeatherHandler.Call(ctx, in, out)
}

func (h *weatherHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.WeatherHandler.ClientStream(ctx, &weatherClientStreamStream{stream})
}

type Weather_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type weatherClientStreamStream struct {
	stream server.Stream
}

func (x *weatherClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *weatherClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *weatherClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *weatherClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *weatherClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *weatherHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.WeatherHandler.ServerStream(ctx, m, &weatherServerStreamStream{stream})
}

type Weather_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type weatherServerStreamStream struct {
	stream server.Stream
}

func (x *weatherServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *weatherServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *weatherServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *weatherServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *weatherServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *weatherHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.WeatherHandler.BidiStream(ctx, &weatherBidiStreamStream{stream})
}

type Weather_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type weatherBidiStreamStream struct {
	stream server.Stream
}

func (x *weatherBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *weatherBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *weatherBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *weatherBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *weatherBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *weatherBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
